function t(t,i){return{x:i.x-t.x,y:i.y-t.y}}function i(t){let i=Math.sqrt(t.x**2+t.y**2);if(0===i)throw Error("Cannot normalize a zero vector");return{x:t.x/i,y:t.y/i}}var e={lerp:function(t,i,e,s,r){return(t-i)*(r-s)/(e-i)+s},splitStringIntoDigits:function(t){return Array.from(t,Number)},isSameDirection:function(t,i){return t.x===i.x&&t.y===i.y},isOppositiveDirection:function(t,i){return -1*t.x===i.x&&-1*t.y===i.y},generateArrayWithDifferentAdjacentDigits:function(t){let i=[t[0]];for(let e=1;e<t.length;e++)t[e]!==i[i.length-1]&&i.push(t[e]);return i},getConsecutiveNumbers:function(t){let i=[],e={digit:0,occurence:0};return t.toReversed().forEach((t,s,r)=>{t===r[s+1]?(e.digit=t,e.occurence++):e.occurence>0&&(i.push(e),e={digit:0,occurence:0})}),i},getVector:t,normalizeVector:i,getNormalizedVectorFromCoordinates:function(e,s){var r;return i({x:-1*(r=t(e,s)).y,y:r.x})},areCoordinatesEqual:function(t,i){return t.x===i.x&&t.y===i.y}};const s=document.querySelector("#canvas"),r=s.getContext("2d"),h=document.querySelector("#number-input");if(r){let t=new class{ctx;startCoordinates;_height;_width;_digit;blockHeight;blockWidth;digitsArray=[];digitsCoordinates=[];digitsDirections=[];consecutiveNumbers=[];options={displayHelpCircles:!1,maxDigits:4};style={helpCircleFillStyle:"rgba(191, 191, 191, 0.1)",helpCircleRadius:10,strokeStyle:"indianred",lineWidth:5,sameDirectionLineLength:10,consecutiveNumberCircleRadius:15,smallCircleRadius:5};constructor(t,i,e,s={x:0,y:0},r){this.ctx=t,this.height=i,this.width=e,this.startCoordinates=s,this.options={...this.options,...r}}set height(t){this._height=t,this.blockHeight=Math.floor(t/4)}set width(t){this._width=t,this.blockWidth=Math.floor(t/3)}get height(){return this._height}get width(){return this._width}set number(t){this._digit=t.slice(0,this.options.maxDigits),this.digitsArray=e.splitStringIntoDigits(this.number),this.digitsCoordinates=this.digitsArray.map(t=>this.getNumberCoordinate(t)),this.digitsDirections=this.digitsArray.map((t,i,e)=>i===e.length-1?{x:0,y:0}:this.getNumberDirection(t,e[i+1])),this.consecutiveNumbers=e.getConsecutiveNumbers(this.digitsArray)}get number(){return this._digit}draw(){if(this.ctx.clearRect(this.startCoordinates.x,this.startCoordinates.y,this.width,this.height),this.options.displayHelpCircles&&this.drawHelpCircles(),!this._digit)throw Error("Glyph cannot be draw without setting number property first.");if(1!==this.consecutiveNumbers.length||this.consecutiveNumbers[0].occurence!==this.options.maxDigits-1){let t=this.getStartCircleCoordinates();this.ctx.beginPath(),this.ctx.arc(t.x,t.y,this.style.smallCircleRadius,0,2*Math.PI),this.ctx.fillStyle=this.style.strokeStyle,this.ctx.fill(),this.ctx.closePath()}this.ctx.strokeStyle=this.style.strokeStyle,this.ctx.lineWidth=this.style.lineWidth,this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.beginPath(),e.generateArrayWithDifferentAdjacentDigits(this.digitsArray).forEach((t,i)=>{let e=this.getNumberCoordinate(t);0===i?this.ctx.moveTo(e.x,e.y):this.ctx.lineTo(e.x,e.y)}),this.ctx.stroke(),this.ctx.closePath(),this.digitsArray.forEach((t,i)=>{if(0!==i&&e.isSameDirection(this.digitsDirections[i],this.digitsDirections[i-1])&&t!==this.digitsArray[i-1]){let s=this.getNumberCoordinate(t),r=this.getNumberCoordinate(this.digitsArray[i+1]),h=e.getNormalizedVectorFromCoordinates(s,r);this.ctx.beginPath(),this.ctx.lineCap="butt",this.ctx.lineJoin="miter",this.ctx.moveTo(s.x+h.x*this.style.sameDirectionLineLength,s.y+h.y*this.style.sameDirectionLineLength),this.ctx.lineTo(s.x-h.x*this.style.sameDirectionLineLength,s.y-h.y*this.style.sameDirectionLineLength),this.ctx.stroke(),this.ctx.closePath(),this.ctx.lineCap="round",this.ctx.lineJoin="round",this.ctx.moveTo(this.digitsCoordinates[i-1].x,this.digitsCoordinates[i-1].y)}}),this.consecutiveNumbers.forEach(t=>{let i=this.getNumberCoordinate(t.digit);this.ctx.beginPath(),this.ctx.arc(i.x,i.y,this.style.consecutiveNumberCircleRadius,0,2*Math.PI),this.ctx.stroke(),this.ctx.closePath(),t.occurence>=2&&(this.ctx.beginPath(),this.ctx.moveTo(i.x-this.style.consecutiveNumberCircleRadius,i.y),this.ctx.lineTo(i.x+this.style.consecutiveNumberCircleRadius,i.y),this.ctx.stroke(),this.ctx.closePath()),t.occurence>=3&&(this.ctx.beginPath(),this.ctx.moveTo(i.x,i.y-this.style.consecutiveNumberCircleRadius),this.ctx.lineTo(i.x,i.y+this.style.consecutiveNumberCircleRadius),this.ctx.stroke(),this.ctx.closePath())}),this.digitsDirections.forEach((t,i)=>{if(0!==i&&i!==this.digitsDirections.length-1&&this.digitsDirections.slice(0,i).some(i=>e.isOppositiveDirection(t,i))){let e=this.getNumberCoordinate(this.digitsArray[i]),s=this.getNumberCoordinate(this.digitsArray[i+1]),r=0!==t.y?10*t.y:0,h=0===r?-10*t.x:0;this.ctx.beginPath(),this.ctx.moveTo(e.x+r,e.y+h),this.ctx.lineTo(s.x+r,s.y+h),this.ctx.stroke(),this.ctx.closePath()}})}drawHelpCircles(){for(let t=0;t<9;t++){let i=this.startCoordinates.x+this.blockWidth*(t%3)+this.blockWidth/2,e=this.startCoordinates.y+this.blockHeight*Math.floor(t/3)+this.blockHeight/2;this.ctx.beginPath(),this.ctx.arc(i,e,this.style.helpCircleRadius,0,2*Math.PI),this.ctx.fillStyle=this.style.helpCircleFillStyle,this.ctx.fill()}let t=this.startCoordinates.x+this.blockWidth+this.blockWidth/2,i=this.startCoordinates.y+3*this.blockHeight+this.blockHeight/2;this.ctx.beginPath(),this.ctx.arc(t,i,this.style.helpCircleRadius,0,2*Math.PI),this.ctx.fillStyle=this.style.helpCircleFillStyle,this.ctx.fill()}getNumberCoordinate(t){let i=e.lerp(t,1,9,8,0);return 0===t?{x:this.startCoordinates.x+this.blockWidth+this.blockWidth/2,y:this.startCoordinates.y+3*this.blockHeight+this.blockHeight/2}:{x:this.startCoordinates.x+this.blockWidth*((t-1)%3)+this.blockWidth/2,y:this.startCoordinates.y+this.blockHeight*Math.floor(i/3)+this.blockHeight/2}}getNumberDirection(t,i){let e=this.getNumberCoordinate(t),s=this.getNumberCoordinate(i);return{x:Math.sign(s.x-e.x)??0,y:Math.sign(s.y-e.y)??0}}getStartCircleCoordinates(){let t=this.digitsCoordinates[0],i=this.digitsCoordinates.find(i=>!e.areCoordinatesEqual(t,i))??this.digitsCoordinates[1],s=e.normalizeVector(e.getVector(t,i));return{x:t.x+-(s.x*this.style.sameDirectionLineLength*1),y:t.y+-(s.y*this.style.sameDirectionLineLength*1)}}}(r,s.clientHeight,s.clientWidth,{x:0,y:0},{displayHelpCircles:!0});h.addEventListener("input",t=>{h.value=t.target.value.replace(/[^0-9]/g,"")}),h.addEventListener("change",i=>{t.number=i.target.value.replace(/[^0-9]/g,""),t.draw()})}
//# sourceMappingURL=number-glyph.ade2e3b5.js.map
